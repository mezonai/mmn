name: Deploy MMN

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (dev|prod)"
        required: true
        default: "dev"
      ref:
        description: "Git ref (branch, tag, or commit)"
        required: true
        default: "master"

jobs:
  build:
    runs-on: self-hosted
    outputs:
      git_sha: ${{ steps.build.outputs.git_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.5"
          cache: true
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libsnappy-dev \
            zlib1g-dev \
            libbz2-dev \
            libgflags-dev \
            liblz4-dev \
            libzstd-dev \
            liburing-dev

      - name: Build MMN binary
        id: build
        env:
          CGO_ENABLED: 1
          CGO_CFLAGS: "-I$(pwd)/libs/rocksdb"
          CGO_LDFLAGS: "-L$(pwd)/libs -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy -llz4 -lzstd -luring"
        run: |
          mkdir -p build
          GOOS=linux GOARCH=amd64 go build -tags rocksdb -o build/mmn .
          GIT_SHA=$(git rev-parse --short=12 HEAD)
          echo "git_sha=$GIT_SHA" >> $GITHUB_OUTPUT
          echo "GIT_SHA=$GIT_SHA" | tee -a $GITHUB_ENV

  deploy:
    needs: build
    runs-on: self-hosted
    environment: ${{ inputs.env }}
    env:
      TARGET_HOST: ${{ inputs.env == 'prod' && secrets.PROD_HOST_ALIAS || secrets.DEV_HOST_ALIAS }}
    steps:
      - name: Copy binary and config to target
        run: |
          scp build/mmn ${TARGET_HOST}:/opt/mezon/mmn/staging/mmn_new
          scp config/genesis.template.yml ${TARGET_HOST}:/opt/mezon/mmn/config/

      - name: Write secrets, config, systemd on target
        run: |
          ssh ${TARGET_HOST} "bash -s" <<'EOS'
            set -e
            sudo mkdir -p /etc/mezon /opt/mezon/mmn/bin /opt/mezon/node-data

            # Bootnode private key
            echo "${BOOTNODE_PRIVKEY}" | base64 -d | sudo tee /etc/mezon/bootnode_privkey.txt >/dev/null
            sudo chmod 600 /etc/mezon/bootnode_privkey.txt
            sudo chown mmn:mmn /etc/mezon/bootnode_privkey.txt

            # Node1 private key
            echo "${NODE1_PRIVKEY}" | base64 -d | sudo tee /etc/mezon/node1_privkey.txt >/dev/null
            sudo chmod 600 /etc/mezon/node1_privkey.txt
            sudo chown mmn:mmn /etc/mezon/node1_privkey.txt

            # Verifying key for proving
            echo "${VERIFYING_KEY_B64}" | base64 -d | sudo tee /etc/mezon/verifying_key >/dev/null
            sudo chmod 600 /etc/mezon/verifying_key
            sudo chown mmn:mmn /etc/mezon/verifying_key

            # Genesis config
            sed \
              -e "s|__LEADER_ADDRESS__|${NODE1_ADDRESS}|g" \
              -e "s|__FAUCET_ADDRESS__|${FAUCET_ADDRESS}|g" \
              /opt/mezon/mmn/config/genesis.template.yml \
              | sudo tee /etc/mezon/genesis.yml >/dev/null
            sudo chown mmn:mmn /etc/mezon/genesis.yml

            # Systemd unit for node1
            BOOTNODE_MULTIADDR="/ip4/${BOOTNODE_IP}/tcp/9000/p2p/${BOOTNODE_ID}"
            sed -e "s|__BOOTNODE_MULTIADDR__|${BOOTNODE_MULTIADDR}|g" \
                /opt/mezon/mmn/config/systemd/mezon-node1.service.tpl \
                | sudo tee /etc/systemd/system/mezon-node1.service >/dev/null

            sudo systemctl daemon-reload
            sudo systemctl enable mezon-node1
          EOS
        env:
          BOOTNODE_PRIVKEY:  ${{ secrets.BOOTNODE_PRIVKEY }}
          NODE1_PRIVKEY:     ${{ secrets.NODE1_PRIVKEY }}
          VERIFYING_KEY_B64: ${{ secrets.VERIFYING_KEY_B64 }}
          NODE1_ADDRESS:     ${{ secrets.NODE1_ADDRESS }}
          FAUCET_ADDRESS:    ${{ secrets.FAUCET_ADDRESS }}
          BOOTNODE_IP:       ${{ secrets.BOOTNODE_IP }}
          BOOTNODE_ID:       ${{ secrets.BOOTNODE_ID }}

      - name: Atomic swap + restart services
        run: |
          ssh ${TARGET_HOST} <<'EOS'
          set -e
          SHA=$(date +%s)

          sudo systemctl stop mezon-node1 || true
          sudo systemctl stop mezon-bootnode || true
          sudo systemctl stop mezon-proving || true

          sudo install -m 0755 /opt/mezon/mmn/staging/mmn_new /opt/mezon/mmn/bin/mmn-${SHA}
          sudo ln -sfn mmn-${SHA} /opt/mezon/mmn/bin/mmn

          if [ ! -d "/opt/mezon/node-data/node1" ]; then
            sudo -u mmn /opt/mezon/mmn/bin/mmn init \
              --data-dir "/opt/mezon/node-data/node1" \
              --genesis "/etc/mezon/genesis.yml" \
              --database rocksdb \
              --privkey-path "/etc/mezon/node1_privkey.txt"
          fi

          sudo systemctl start mezon-bootnode || true
          sleep 2
          sudo systemctl start mezon-node1 || true
          EOS


      - name: Healthcheck
        run: |
          ssh ${TARGET_HOST} "sudo systemctl --no-pager -l status mezon-node1 | tail -n 50"
          ssh ${TARGET_HOST} "curl -sSf http://127.0.0.1:8081/health || true"
