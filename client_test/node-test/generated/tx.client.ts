// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "tx.proto" (package "mmn", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TxService } from "./tx";
import type { TransactionStatusUpdate } from "./tx";
import type { SubscribeTransactionStatusRequest } from "./tx";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetTransactionStatusResponse } from "./tx";
import type { GetTransactionStatusRequest } from "./tx";
import type { AddTxResponse } from "./tx";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TxResponse } from "./tx";
import type { SignedTxMsg } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service mmn.TxService
 */
export interface ITxServiceClient {
    /**
     * @generated from protobuf rpc: TxBroadcast
     */
    txBroadcast(input: SignedTxMsg, options?: RpcOptions): UnaryCall<SignedTxMsg, TxResponse>;
    /**
     * @generated from protobuf rpc: AddTx
     */
    addTx(input: SignedTxMsg, options?: RpcOptions): UnaryCall<SignedTxMsg, AddTxResponse>;
    /**
     * Get current status of a transaction
     *
     * @generated from protobuf rpc: GetTransactionStatus
     */
    getTransactionStatus(input: GetTransactionStatusRequest, options?: RpcOptions): UnaryCall<GetTransactionStatusRequest, GetTransactionStatusResponse>;
    /**
     * Subscribe to status updates for all transactions (or specific transaction if tx_hash provided)
     *
     * @generated from protobuf rpc: SubscribeTransactionStatus
     */
    subscribeTransactionStatus(input: SubscribeTransactionStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTransactionStatusRequest, TransactionStatusUpdate>;
}
/**
 * @generated from protobuf service mmn.TxService
 */
export class TxServiceClient implements ITxServiceClient, ServiceInfo {
    typeName = TxService.typeName;
    methods = TxService.methods;
    options = TxService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: TxBroadcast
     */
    txBroadcast(input: SignedTxMsg, options?: RpcOptions): UnaryCall<SignedTxMsg, TxResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SignedTxMsg, TxResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddTx
     */
    addTx(input: SignedTxMsg, options?: RpcOptions): UnaryCall<SignedTxMsg, AddTxResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SignedTxMsg, AddTxResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get current status of a transaction
     *
     * @generated from protobuf rpc: GetTransactionStatus
     */
    getTransactionStatus(input: GetTransactionStatusRequest, options?: RpcOptions): UnaryCall<GetTransactionStatusRequest, GetTransactionStatusResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTransactionStatusRequest, GetTransactionStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to status updates for all transactions (or specific transaction if tx_hash provided)
     *
     * @generated from protobuf rpc: SubscribeTransactionStatus
     */
    subscribeTransactionStatus(input: SubscribeTransactionStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTransactionStatusRequest, TransactionStatusUpdate> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTransactionStatusRequest, TransactionStatusUpdate>("serverStreaming", this._transport, method, opt, input);
    }
}
