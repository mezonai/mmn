// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "account.proto" (package "mmn", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mmn.GetAccountRequest
 */
export interface GetAccountRequest {
    /**
     * @generated from protobuf field: string address = 1
     */
    address: string;
}
/**
 * @generated from protobuf message mmn.GetAccountResponse
 */
export interface GetAccountResponse {
    /**
     * @generated from protobuf field: string address = 1
     */
    address: string;
    /**
     * @generated from protobuf field: string balance = 2
     */
    balance: string;
    /**
     * @generated from protobuf field: uint64 nonce = 3
     */
    nonce: bigint;
    /**
     * @generated from protobuf field: uint32 decimals = 4
     */
    decimals: number; // Number of fractional digits for amount formatting
}
/**
 * @generated from protobuf message mmn.GetTxHistoryRequest
 */
export interface GetTxHistoryRequest {
    /**
     * @generated from protobuf field: string address = 1
     */
    address: string;
    /**
     * @generated from protobuf field: uint32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: uint32 offset = 3
     */
    offset: number;
    /**
     * @generated from protobuf field: uint32 filter = 4
     */
    filter: number;
}
/**
 * @generated from protobuf message mmn.TxMeta
 */
export interface TxMeta {
    /**
     * @generated from protobuf field: string sender = 1
     */
    sender: string; // sender address
    /**
     * @generated from protobuf field: string recipient = 2
     */
    recipient: string; // recipient address
    /**
     * @generated from protobuf field: string amount = 3
     */
    amount: string; // amount
    /**
     * @generated from protobuf field: uint64 nonce = 4
     */
    nonce: bigint; // nonce
    /**
     * @generated from protobuf field: uint64 timestamp = 5
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: mmn.TxMeta.Status status = 6
     */
    status: TxMeta_Status;
}
/**
 * @generated from protobuf enum mmn.TxMeta.Status
 */
export enum TxMeta_Status {
    /**
     * @generated from protobuf enum value: PENDING = 0;
     */
    PENDING = 0,
    /**
     * @generated from protobuf enum value: CONFIRMED = 1;
     */
    CONFIRMED = 1,
    /**
     * @generated from protobuf enum value: FINALIZED = 2;
     */
    FINALIZED = 2,
    /**
     * @generated from protobuf enum value: FAILED = 3;
     */
    FAILED = 3
}
/**
 * @generated from protobuf message mmn.GetTxHistoryResponse
 */
export interface GetTxHistoryResponse {
    /**
     * @generated from protobuf field: uint32 total = 1
     */
    total: number;
    /**
     * @generated from protobuf field: repeated mmn.TxMeta txs = 2
     */
    txs: TxMeta[];
    /**
     * @generated from protobuf field: uint32 decimals = 3
     */
    decimals: number; // Number of fractional digits for amount formatting
}
/**
 * @generated from protobuf message mmn.GetCurrentNonceRequest
 */
export interface GetCurrentNonceRequest {
    /**
     * @generated from protobuf field: string address = 1
     */
    address: string;
    /**
     * @generated from protobuf field: string tag = 2
     */
    tag: string; // "latest" or "pending"
}
/**
 * @generated from protobuf message mmn.GetCurrentNonceResponse
 */
export interface GetCurrentNonceResponse {
    /**
     * @generated from protobuf field: string address = 1
     */
    address: string;
    /**
     * @generated from protobuf field: uint64 nonce = 2
     */
    nonce: bigint;
    /**
     * @generated from protobuf field: string tag = 3
     */
    tag: string;
    /**
     * @generated from protobuf field: string error = 4
     */
    error: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountRequest$Type extends MessageType<GetAccountRequest> {
    constructor() {
        super("mmn.GetAccountRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAccountRequest>): GetAccountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<GetAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountRequest): GetAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mmn.GetAccountRequest
 */
export const GetAccountRequest = new GetAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountResponse$Type extends MessageType<GetAccountResponse> {
    constructor() {
        super("mmn.GetAccountResponse", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "balance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "nonce", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "decimals", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAccountResponse>): GetAccountResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.balance = "";
        message.nonce = 0n;
        message.decimals = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountResponse): GetAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string balance */ 2:
                    message.balance = reader.string();
                    break;
                case /* uint64 nonce */ 3:
                    message.nonce = reader.uint64().toBigInt();
                    break;
                case /* uint32 decimals */ 4:
                    message.decimals = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string balance = 2; */
        if (message.balance !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.balance);
        /* uint64 nonce = 3; */
        if (message.nonce !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.nonce);
        /* uint32 decimals = 4; */
        if (message.decimals !== 0)
            writer.tag(4, WireType.Varint).uint32(message.decimals);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mmn.GetAccountResponse
 */
export const GetAccountResponse = new GetAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTxHistoryRequest$Type extends MessageType<GetTxHistoryRequest> {
    constructor() {
        super("mmn.GetTxHistoryRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "offset", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "filter", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetTxHistoryRequest>): GetTxHistoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.limit = 0;
        message.offset = 0;
        message.filter = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTxHistoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxHistoryRequest): GetTxHistoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* uint32 limit */ 2:
                    message.limit = reader.uint32();
                    break;
                case /* uint32 offset */ 3:
                    message.offset = reader.uint32();
                    break;
                case /* uint32 filter */ 4:
                    message.filter = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTxHistoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* uint32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).uint32(message.limit);
        /* uint32 offset = 3; */
        if (message.offset !== 0)
            writer.tag(3, WireType.Varint).uint32(message.offset);
        /* uint32 filter = 4; */
        if (message.filter !== 0)
            writer.tag(4, WireType.Varint).uint32(message.filter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mmn.GetTxHistoryRequest
 */
export const GetTxHistoryRequest = new GetTxHistoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxMeta$Type extends MessageType<TxMeta> {
    constructor() {
        super("mmn.TxMeta", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "nonce", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "status", kind: "enum", T: () => ["mmn.TxMeta.Status", TxMeta_Status] }
        ]);
    }
    create(value?: PartialMessage<TxMeta>): TxMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sender = "";
        message.recipient = "";
        message.amount = "";
        message.nonce = 0n;
        message.timestamp = 0n;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<TxMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxMeta): TxMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string recipient */ 2:
                    message.recipient = reader.string();
                    break;
                case /* string amount */ 3:
                    message.amount = reader.string();
                    break;
                case /* uint64 nonce */ 4:
                    message.nonce = reader.uint64().toBigInt();
                    break;
                case /* uint64 timestamp */ 5:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* mmn.TxMeta.Status status */ 6:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string recipient = 2; */
        if (message.recipient !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recipient);
        /* string amount = 3; */
        if (message.amount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.amount);
        /* uint64 nonce = 4; */
        if (message.nonce !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.nonce);
        /* uint64 timestamp = 5; */
        if (message.timestamp !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.timestamp);
        /* mmn.TxMeta.Status status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mmn.TxMeta
 */
export const TxMeta = new TxMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTxHistoryResponse$Type extends MessageType<GetTxHistoryResponse> {
    constructor() {
        super("mmn.GetTxHistoryResponse", [
            { no: 1, name: "total", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "txs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TxMeta },
            { no: 3, name: "decimals", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetTxHistoryResponse>): GetTxHistoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.total = 0;
        message.txs = [];
        message.decimals = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTxHistoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxHistoryResponse): GetTxHistoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 total */ 1:
                    message.total = reader.uint32();
                    break;
                case /* repeated mmn.TxMeta txs */ 2:
                    message.txs.push(TxMeta.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 decimals */ 3:
                    message.decimals = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTxHistoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 total = 1; */
        if (message.total !== 0)
            writer.tag(1, WireType.Varint).uint32(message.total);
        /* repeated mmn.TxMeta txs = 2; */
        for (let i = 0; i < message.txs.length; i++)
            TxMeta.internalBinaryWrite(message.txs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 decimals = 3; */
        if (message.decimals !== 0)
            writer.tag(3, WireType.Varint).uint32(message.decimals);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mmn.GetTxHistoryResponse
 */
export const GetTxHistoryResponse = new GetTxHistoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCurrentNonceRequest$Type extends MessageType<GetCurrentNonceRequest> {
    constructor() {
        super("mmn.GetCurrentNonceRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCurrentNonceRequest>): GetCurrentNonceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.tag = "";
        if (value !== undefined)
            reflectionMergePartial<GetCurrentNonceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCurrentNonceRequest): GetCurrentNonceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string tag */ 2:
                    message.tag = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCurrentNonceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string tag = 2; */
        if (message.tag !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mmn.GetCurrentNonceRequest
 */
export const GetCurrentNonceRequest = new GetCurrentNonceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCurrentNonceResponse$Type extends MessageType<GetCurrentNonceResponse> {
    constructor() {
        super("mmn.GetCurrentNonceResponse", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nonce", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCurrentNonceResponse>): GetCurrentNonceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.nonce = 0n;
        message.tag = "";
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<GetCurrentNonceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCurrentNonceResponse): GetCurrentNonceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* uint64 nonce */ 2:
                    message.nonce = reader.uint64().toBigInt();
                    break;
                case /* string tag */ 3:
                    message.tag = reader.string();
                    break;
                case /* string error */ 4:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCurrentNonceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* uint64 nonce = 2; */
        if (message.nonce !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.nonce);
        /* string tag = 3; */
        if (message.tag !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tag);
        /* string error = 4; */
        if (message.error !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mmn.GetCurrentNonceResponse
 */
export const GetCurrentNonceResponse = new GetCurrentNonceResponse$Type();
/**
 * @generated ServiceType for protobuf service mmn.AccountService
 */
export const AccountService = new ServiceType("mmn.AccountService", [
    { name: "GetAccount", options: {}, I: GetAccountRequest, O: GetAccountResponse },
    { name: "GetTxHistory", options: {}, I: GetTxHistoryRequest, O: GetTxHistoryResponse },
    { name: "GetCurrentNonce", options: {}, I: GetCurrentNonceRequest, O: GetCurrentNonceResponse }
]);
