// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: transaction_status.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionStatusService_GetTransactionStatus_FullMethodName       = "/mmn.TransactionStatusService/GetTransactionStatus"
	TransactionStatusService_SubscribeTransactionStatus_FullMethodName = "/mmn.TransactionStatusService/SubscribeTransactionStatus"
	TransactionStatusService_TrackTransactions_FullMethodName          = "/mmn.TransactionStatusService/TrackTransactions"
)

// TransactionStatusServiceClient is the client API for TransactionStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Transaction status service
type TransactionStatusServiceClient interface {
	// Get current status of a transaction
	GetTransactionStatus(ctx context.Context, in *GetTransactionStatusRequest, opts ...grpc.CallOption) (*GetTransactionStatusResponse, error)
	// Subscribe to status updates for a single transaction
	SubscribeTransactionStatus(ctx context.Context, in *SubscribeTransactionStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionStatusUpdate], error)
	// Track multiple transactions and get their final status
	TrackTransactions(ctx context.Context, in *TrackTransactionsRequest, opts ...grpc.CallOption) (*TrackTransactionsResponse, error)
}

type transactionStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionStatusServiceClient(cc grpc.ClientConnInterface) TransactionStatusServiceClient {
	return &transactionStatusServiceClient{cc}
}

func (c *transactionStatusServiceClient) GetTransactionStatus(ctx context.Context, in *GetTransactionStatusRequest, opts ...grpc.CallOption) (*GetTransactionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionStatusResponse)
	err := c.cc.Invoke(ctx, TransactionStatusService_GetTransactionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatusServiceClient) SubscribeTransactionStatus(ctx context.Context, in *SubscribeTransactionStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionStatusUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionStatusService_ServiceDesc.Streams[0], TransactionStatusService_SubscribeTransactionStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTransactionStatusRequest, TransactionStatusUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionStatusService_SubscribeTransactionStatusClient = grpc.ServerStreamingClient[TransactionStatusUpdate]

func (c *transactionStatusServiceClient) TrackTransactions(ctx context.Context, in *TrackTransactionsRequest, opts ...grpc.CallOption) (*TrackTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionStatusService_TrackTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionStatusServiceServer is the server API for TransactionStatusService service.
// All implementations must embed UnimplementedTransactionStatusServiceServer
// for forward compatibility.
//
// Transaction status service
type TransactionStatusServiceServer interface {
	// Get current status of a transaction
	GetTransactionStatus(context.Context, *GetTransactionStatusRequest) (*GetTransactionStatusResponse, error)
	// Subscribe to status updates for a single transaction
	SubscribeTransactionStatus(*SubscribeTransactionStatusRequest, grpc.ServerStreamingServer[TransactionStatusUpdate]) error
	// Track multiple transactions and get their final status
	TrackTransactions(context.Context, *TrackTransactionsRequest) (*TrackTransactionsResponse, error)
	mustEmbedUnimplementedTransactionStatusServiceServer()
}

// UnimplementedTransactionStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionStatusServiceServer struct{}

func (UnimplementedTransactionStatusServiceServer) GetTransactionStatus(context.Context, *GetTransactionStatusRequest) (*GetTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionStatus not implemented")
}
func (UnimplementedTransactionStatusServiceServer) SubscribeTransactionStatus(*SubscribeTransactionStatusRequest, grpc.ServerStreamingServer[TransactionStatusUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransactionStatus not implemented")
}
func (UnimplementedTransactionStatusServiceServer) TrackTransactions(context.Context, *TrackTransactionsRequest) (*TrackTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackTransactions not implemented")
}
func (UnimplementedTransactionStatusServiceServer) mustEmbedUnimplementedTransactionStatusServiceServer() {
}
func (UnimplementedTransactionStatusServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionStatusServiceServer will
// result in compilation errors.
type UnsafeTransactionStatusServiceServer interface {
	mustEmbedUnimplementedTransactionStatusServiceServer()
}

func RegisterTransactionStatusServiceServer(s grpc.ServiceRegistrar, srv TransactionStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionStatusService_ServiceDesc, srv)
}

func _TransactionStatusService_GetTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatusServiceServer).GetTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatusService_GetTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatusServiceServer).GetTransactionStatus(ctx, req.(*GetTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatusService_SubscribeTransactionStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTransactionStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionStatusServiceServer).SubscribeTransactionStatus(m, &grpc.GenericServerStream[SubscribeTransactionStatusRequest, TransactionStatusUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionStatusService_SubscribeTransactionStatusServer = grpc.ServerStreamingServer[TransactionStatusUpdate]

func _TransactionStatusService_TrackTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatusServiceServer).TrackTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatusService_TrackTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatusServiceServer).TrackTransactions(ctx, req.(*TrackTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionStatusService_ServiceDesc is the grpc.ServiceDesc for TransactionStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mmn.TransactionStatusService",
	HandlerType: (*TransactionStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionStatus",
			Handler:    _TransactionStatusService_GetTransactionStatus_Handler,
		},
		{
			MethodName: "TrackTransactions",
			Handler:    _TransactionStatusService_TrackTransactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTransactionStatus",
			Handler:       _TransactionStatusService_SubscribeTransactionStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transaction_status.proto",
}
