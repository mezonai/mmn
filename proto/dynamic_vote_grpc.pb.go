// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: dynamic_vote.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DynamicVoteService_StartVotingRound_FullMethodName      = "/proto.DynamicVoteService/StartVotingRound"
	DynamicVoteService_CastVote_FullMethodName              = "/proto.DynamicVoteService/CastVote"
	DynamicVoteService_GetVotingRoundStatus_FullMethodName  = "/proto.DynamicVoteService/GetVotingRoundStatus"
	DynamicVoteService_GetActiveVotingRounds_FullMethodName = "/proto.DynamicVoteService/GetActiveVotingRounds"
)

// DynamicVoteServiceClient is the client API for DynamicVoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Dynamic voting service
type DynamicVoteServiceClient interface {
	// Start a new voting round
	StartVotingRound(ctx context.Context, in *StartVotingRoundRequest, opts ...grpc.CallOption) (*StartVotingRoundResponse, error)
	// Cast a vote
	CastVote(ctx context.Context, in *CastVoteRequest, opts ...grpc.CallOption) (*CastVoteResponse, error)
	// Get voting round status
	GetVotingRoundStatus(ctx context.Context, in *GetVotingRoundStatusRequest, opts ...grpc.CallOption) (*GetVotingRoundStatusResponse, error)
	// Get all active voting rounds
	GetActiveVotingRounds(ctx context.Context, in *GetActiveVotingRoundsRequest, opts ...grpc.CallOption) (*GetActiveVotingRoundsResponse, error)
}

type dynamicVoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicVoteServiceClient(cc grpc.ClientConnInterface) DynamicVoteServiceClient {
	return &dynamicVoteServiceClient{cc}
}

func (c *dynamicVoteServiceClient) StartVotingRound(ctx context.Context, in *StartVotingRoundRequest, opts ...grpc.CallOption) (*StartVotingRoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartVotingRoundResponse)
	err := c.cc.Invoke(ctx, DynamicVoteService_StartVotingRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicVoteServiceClient) CastVote(ctx context.Context, in *CastVoteRequest, opts ...grpc.CallOption) (*CastVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CastVoteResponse)
	err := c.cc.Invoke(ctx, DynamicVoteService_CastVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicVoteServiceClient) GetVotingRoundStatus(ctx context.Context, in *GetVotingRoundStatusRequest, opts ...grpc.CallOption) (*GetVotingRoundStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVotingRoundStatusResponse)
	err := c.cc.Invoke(ctx, DynamicVoteService_GetVotingRoundStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicVoteServiceClient) GetActiveVotingRounds(ctx context.Context, in *GetActiveVotingRoundsRequest, opts ...grpc.CallOption) (*GetActiveVotingRoundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveVotingRoundsResponse)
	err := c.cc.Invoke(ctx, DynamicVoteService_GetActiveVotingRounds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicVoteServiceServer is the server API for DynamicVoteService service.
// All implementations must embed UnimplementedDynamicVoteServiceServer
// for forward compatibility.
//
// Dynamic voting service
type DynamicVoteServiceServer interface {
	// Start a new voting round
	StartVotingRound(context.Context, *StartVotingRoundRequest) (*StartVotingRoundResponse, error)
	// Cast a vote
	CastVote(context.Context, *CastVoteRequest) (*CastVoteResponse, error)
	// Get voting round status
	GetVotingRoundStatus(context.Context, *GetVotingRoundStatusRequest) (*GetVotingRoundStatusResponse, error)
	// Get all active voting rounds
	GetActiveVotingRounds(context.Context, *GetActiveVotingRoundsRequest) (*GetActiveVotingRoundsResponse, error)
	mustEmbedUnimplementedDynamicVoteServiceServer()
}

// UnimplementedDynamicVoteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDynamicVoteServiceServer struct{}

func (UnimplementedDynamicVoteServiceServer) StartVotingRound(context.Context, *StartVotingRoundRequest) (*StartVotingRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVotingRound not implemented")
}
func (UnimplementedDynamicVoteServiceServer) CastVote(context.Context, *CastVoteRequest) (*CastVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CastVote not implemented")
}
func (UnimplementedDynamicVoteServiceServer) GetVotingRoundStatus(context.Context, *GetVotingRoundStatusRequest) (*GetVotingRoundStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVotingRoundStatus not implemented")
}
func (UnimplementedDynamicVoteServiceServer) GetActiveVotingRounds(context.Context, *GetActiveVotingRoundsRequest) (*GetActiveVotingRoundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveVotingRounds not implemented")
}
func (UnimplementedDynamicVoteServiceServer) mustEmbedUnimplementedDynamicVoteServiceServer() {}
func (UnimplementedDynamicVoteServiceServer) testEmbeddedByValue()                            {}

// UnsafeDynamicVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicVoteServiceServer will
// result in compilation errors.
type UnsafeDynamicVoteServiceServer interface {
	mustEmbedUnimplementedDynamicVoteServiceServer()
}

func RegisterDynamicVoteServiceServer(s grpc.ServiceRegistrar, srv DynamicVoteServiceServer) {
	// If the following call pancis, it indicates UnimplementedDynamicVoteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DynamicVoteService_ServiceDesc, srv)
}

func _DynamicVoteService_StartVotingRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVotingRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicVoteServiceServer).StartVotingRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicVoteService_StartVotingRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicVoteServiceServer).StartVotingRound(ctx, req.(*StartVotingRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicVoteService_CastVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicVoteServiceServer).CastVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicVoteService_CastVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicVoteServiceServer).CastVote(ctx, req.(*CastVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicVoteService_GetVotingRoundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVotingRoundStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicVoteServiceServer).GetVotingRoundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicVoteService_GetVotingRoundStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicVoteServiceServer).GetVotingRoundStatus(ctx, req.(*GetVotingRoundStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicVoteService_GetActiveVotingRounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveVotingRoundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicVoteServiceServer).GetActiveVotingRounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicVoteService_GetActiveVotingRounds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicVoteServiceServer).GetActiveVotingRounds(ctx, req.(*GetActiveVotingRoundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamicVoteService_ServiceDesc is the grpc.ServiceDesc for DynamicVoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamicVoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DynamicVoteService",
	HandlerType: (*DynamicVoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartVotingRound",
			Handler:    _DynamicVoteService_StartVotingRound_Handler,
		},
		{
			MethodName: "CastVote",
			Handler:    _DynamicVoteService_CastVote_Handler,
		},
		{
			MethodName: "GetVotingRoundStatus",
			Handler:    _DynamicVoteService_GetVotingRoundStatus_Handler,
		},
		{
			MethodName: "GetActiveVotingRounds",
			Handler:    _DynamicVoteService_GetActiveVotingRounds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic_vote.proto",
}
