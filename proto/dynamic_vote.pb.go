// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.12.4
// source: dynamic_vote.proto

package proto

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Vote types
type VoteType int32

const (
	VoteType_VOTE_TYPE_BLOCK      VoteType = 0
	VoteType_VOTE_TYPE_EPOCH      VoteType = 1
	VoteType_VOTE_TYPE_SLASHING   VoteType = 2
	VoteType_VOTE_TYPE_GOVERNANCE VoteType = 3
)

// Enum value maps for VoteType.
var (
	VoteType_name = map[int32]string{
		0: "VOTE_TYPE_BLOCK",
		1: "VOTE_TYPE_EPOCH",
		2: "VOTE_TYPE_SLASHING",
		3: "VOTE_TYPE_GOVERNANCE",
	}
	VoteType_value = map[string]int32{
		"VOTE_TYPE_BLOCK":      0,
		"VOTE_TYPE_EPOCH":      1,
		"VOTE_TYPE_SLASHING":   2,
		"VOTE_TYPE_GOVERNANCE": 3,
	}
)

func (x VoteType) Enum() *VoteType {
	p := new(VoteType)
	*p = x
	return p
}

func (x VoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_dynamic_vote_proto_enumTypes[0].Descriptor()
}

func (VoteType) Type() protoreflect.EnumType {
	return &file_dynamic_vote_proto_enumTypes[0]
}

func (x VoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoteType.Descriptor instead.
func (VoteType) EnumDescriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{0}
}

// Voting status
type VotingStatus int32

const (
	VotingStatus_VOTING_ACTIVE  VotingStatus = 0
	VotingStatus_VOTING_PASSED  VotingStatus = 1
	VotingStatus_VOTING_FAILED  VotingStatus = 2
	VotingStatus_VOTING_EXPIRED VotingStatus = 3
)

// Enum value maps for VotingStatus.
var (
	VotingStatus_name = map[int32]string{
		0: "VOTING_ACTIVE",
		1: "VOTING_PASSED",
		2: "VOTING_FAILED",
		3: "VOTING_EXPIRED",
	}
	VotingStatus_value = map[string]int32{
		"VOTING_ACTIVE":  0,
		"VOTING_PASSED":  1,
		"VOTING_FAILED":  2,
		"VOTING_EXPIRED": 3,
	}
)

func (x VotingStatus) Enum() *VotingStatus {
	p := new(VotingStatus)
	*p = x
	return p
}

func (x VotingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VotingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dynamic_vote_proto_enumTypes[1].Descriptor()
}

func (VotingStatus) Type() protoreflect.EnumType {
	return &file_dynamic_vote_proto_enumTypes[1]
}

func (x VotingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VotingStatus.Descriptor instead.
func (VotingStatus) EnumDescriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{1}
}

// Start voting round request
type StartVotingRoundRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoundId       string                 `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	VoteType      VoteType               `protobuf:"varint,2,opt,name=vote_type,json=voteType,proto3,enum=proto.VoteType" json:"vote_type,omitempty"`
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	RequiredStake string                 `protobuf:"bytes,4,opt,name=required_stake,json=requiredStake,proto3" json:"required_stake,omitempty"` // big.Int as string
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartVotingRoundRequest) Reset() {
	*x = StartVotingRoundRequest{}
	mi := &file_dynamic_vote_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVotingRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVotingRoundRequest) ProtoMessage() {}

func (x *StartVotingRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVotingRoundRequest.ProtoReflect.Descriptor instead.
func (*StartVotingRoundRequest) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{0}
}

func (x *StartVotingRoundRequest) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *StartVotingRoundRequest) GetVoteType() VoteType {
	if x != nil {
		return x.VoteType
	}
	return VoteType_VOTE_TYPE_BLOCK
}

func (x *StartVotingRoundRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *StartVotingRoundRequest) GetRequiredStake() string {
	if x != nil {
		return x.RequiredStake
	}
	return ""
}

type StartVotingRoundResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartVotingRoundResponse) Reset() {
	*x = StartVotingRoundResponse{}
	mi := &file_dynamic_vote_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVotingRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVotingRoundResponse) ProtoMessage() {}

func (x *StartVotingRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVotingRoundResponse.ProtoReflect.Descriptor instead.
func (*StartVotingRoundResponse) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{1}
}

func (x *StartVotingRoundResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartVotingRoundResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Cast vote request
type CastVoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoundId       string                 `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Support       bool                   `protobuf:"varint,2,opt,name=support,proto3" json:"support,omitempty"`
	Signature     []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CastVoteRequest) Reset() {
	*x = CastVoteRequest{}
	mi := &file_dynamic_vote_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CastVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastVoteRequest) ProtoMessage() {}

func (x *CastVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastVoteRequest.ProtoReflect.Descriptor instead.
func (*CastVoteRequest) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{2}
}

func (x *CastVoteRequest) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *CastVoteRequest) GetSupport() bool {
	if x != nil {
		return x.Support
	}
	return false
}

func (x *CastVoteRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CastVoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CastVoteResponse) Reset() {
	*x = CastVoteResponse{}
	mi := &file_dynamic_vote_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CastVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastVoteResponse) ProtoMessage() {}

func (x *CastVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastVoteResponse.ProtoReflect.Descriptor instead.
func (*CastVoteResponse) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{3}
}

func (x *CastVoteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CastVoteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Get voting round status request
type GetVotingRoundStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoundId       string                 `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVotingRoundStatusRequest) Reset() {
	*x = GetVotingRoundStatusRequest{}
	mi := &file_dynamic_vote_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVotingRoundStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotingRoundStatusRequest) ProtoMessage() {}

func (x *GetVotingRoundStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotingRoundStatusRequest.ProtoReflect.Descriptor instead.
func (*GetVotingRoundStatusRequest) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{4}
}

func (x *GetVotingRoundStatusRequest) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

type GetVotingRoundStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        bool                   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Round         *VotingRound           `protobuf:"bytes,2,opt,name=round,proto3" json:"round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVotingRoundStatusResponse) Reset() {
	*x = GetVotingRoundStatusResponse{}
	mi := &file_dynamic_vote_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVotingRoundStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotingRoundStatusResponse) ProtoMessage() {}

func (x *GetVotingRoundStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotingRoundStatusResponse.ProtoReflect.Descriptor instead.
func (*GetVotingRoundStatusResponse) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{5}
}

func (x *GetVotingRoundStatusResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *GetVotingRoundStatusResponse) GetRound() *VotingRound {
	if x != nil {
		return x.Round
	}
	return nil
}

// Get active voting rounds request
type GetActiveVotingRoundsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveVotingRoundsRequest) Reset() {
	*x = GetActiveVotingRoundsRequest{}
	mi := &file_dynamic_vote_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveVotingRoundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveVotingRoundsRequest) ProtoMessage() {}

func (x *GetActiveVotingRoundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveVotingRoundsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveVotingRoundsRequest) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{6}
}

type GetActiveVotingRoundsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rounds        []*VotingRound         `protobuf:"bytes,1,rep,name=rounds,proto3" json:"rounds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveVotingRoundsResponse) Reset() {
	*x = GetActiveVotingRoundsResponse{}
	mi := &file_dynamic_vote_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveVotingRoundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveVotingRoundsResponse) ProtoMessage() {}

func (x *GetActiveVotingRoundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveVotingRoundsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveVotingRoundsResponse) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{7}
}

func (x *GetActiveVotingRoundsResponse) GetRounds() []*VotingRound {
	if x != nil {
		return x.Rounds
	}
	return nil
}

// Vote information
type Vote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoterPubKey   string                 `protobuf:"bytes,1,opt,name=voter_pub_key,json=voterPubKey,proto3" json:"voter_pub_key,omitempty"`
	VoteType      VoteType               `protobuf:"varint,2,opt,name=vote_type,json=voteType,proto3,enum=proto.VoteType" json:"vote_type,omitempty"`
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Support       bool                   `protobuf:"varint,4,opt,name=support,proto3" json:"support,omitempty"`
	StakeWeight   string                 `protobuf:"bytes,5,opt,name=stake_weight,json=stakeWeight,proto3" json:"stake_weight,omitempty"` // big.Int as string
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	VoteSignature []byte                 `protobuf:"bytes,7,opt,name=vote_signature,json=voteSignature,proto3" json:"vote_signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_dynamic_vote_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{8}
}

func (x *Vote) GetVoterPubKey() string {
	if x != nil {
		return x.VoterPubKey
	}
	return ""
}

func (x *Vote) GetVoteType() VoteType {
	if x != nil {
		return x.VoteType
	}
	return VoteType_VOTE_TYPE_BLOCK
}

func (x *Vote) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Vote) GetSupport() bool {
	if x != nil {
		return x.Support
	}
	return false
}

func (x *Vote) GetStakeWeight() string {
	if x != nil {
		return x.StakeWeight
	}
	return ""
}

func (x *Vote) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Vote) GetVoteSignature() []byte {
	if x != nil {
		return x.VoteSignature
	}
	return nil
}

// Voting round information
type VotingRound struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoundId       string                 `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	VoteType      VoteType               `protobuf:"varint,2,opt,name=vote_type,json=voteType,proto3,enum=proto.VoteType" json:"vote_type,omitempty"`
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	StartTime     *timestamp.Timestamp   `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamp.Timestamp   `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Votes         []*Vote                `protobuf:"bytes,6,rep,name=votes,proto3" json:"votes,omitempty"`
	RequiredStake string                 `protobuf:"bytes,7,opt,name=required_stake,json=requiredStake,proto3" json:"required_stake,omitempty"` // big.Int as string
	Status        VotingStatus           `protobuf:"varint,8,opt,name=status,proto3,enum=proto.VotingStatus" json:"status,omitempty"`
	// Additional statistics
	TotalSupportStake string `protobuf:"bytes,9,opt,name=total_support_stake,json=totalSupportStake,proto3" json:"total_support_stake,omitempty"`
	TotalOpposeStake  string `protobuf:"bytes,10,opt,name=total_oppose_stake,json=totalOpposeStake,proto3" json:"total_oppose_stake,omitempty"`
	TotalVotedStake   string `protobuf:"bytes,11,opt,name=total_voted_stake,json=totalVotedStake,proto3" json:"total_voted_stake,omitempty"`
	VoterCount        int32  `protobuf:"varint,12,opt,name=voter_count,json=voterCount,proto3" json:"voter_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VotingRound) Reset() {
	*x = VotingRound{}
	mi := &file_dynamic_vote_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VotingRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotingRound) ProtoMessage() {}

func (x *VotingRound) ProtoReflect() protoreflect.Message {
	mi := &file_dynamic_vote_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotingRound.ProtoReflect.Descriptor instead.
func (*VotingRound) Descriptor() ([]byte, []int) {
	return file_dynamic_vote_proto_rawDescGZIP(), []int{9}
}

func (x *VotingRound) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *VotingRound) GetVoteType() VoteType {
	if x != nil {
		return x.VoteType
	}
	return VoteType_VOTE_TYPE_BLOCK
}

func (x *VotingRound) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *VotingRound) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *VotingRound) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *VotingRound) GetVotes() []*Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *VotingRound) GetRequiredStake() string {
	if x != nil {
		return x.RequiredStake
	}
	return ""
}

func (x *VotingRound) GetStatus() VotingStatus {
	if x != nil {
		return x.Status
	}
	return VotingStatus_VOTING_ACTIVE
}

func (x *VotingRound) GetTotalSupportStake() string {
	if x != nil {
		return x.TotalSupportStake
	}
	return ""
}

func (x *VotingRound) GetTotalOpposeStake() string {
	if x != nil {
		return x.TotalOpposeStake
	}
	return ""
}

func (x *VotingRound) GetTotalVotedStake() string {
	if x != nil {
		return x.TotalVotedStake
	}
	return ""
}

func (x *VotingRound) GetVoterCount() int32 {
	if x != nil {
		return x.VoterCount
	}
	return 0
}

var File_dynamic_vote_proto protoreflect.FileDescriptor

const file_dynamic_vote_proto_rawDesc = "" +
	"\n" +
	"\x12dynamic_vote.proto\x12\x05proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa1\x01\n" +
	"\x17StartVotingRoundRequest\x12\x19\n" +
	"\bround_id\x18\x01 \x01(\tR\aroundId\x12,\n" +
	"\tvote_type\x18\x02 \x01(\x0e2\x0f.proto.VoteTypeR\bvoteType\x12\x16\n" +
	"\x06target\x18\x03 \x01(\tR\x06target\x12%\n" +
	"\x0erequired_stake\x18\x04 \x01(\tR\rrequiredStake\"N\n" +
	"\x18StartVotingRoundResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"d\n" +
	"\x0fCastVoteRequest\x12\x19\n" +
	"\bround_id\x18\x01 \x01(\tR\aroundId\x12\x18\n" +
	"\asupport\x18\x02 \x01(\bR\asupport\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\"F\n" +
	"\x10CastVoteResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"8\n" +
	"\x1bGetVotingRoundStatusRequest\x12\x19\n" +
	"\bround_id\x18\x01 \x01(\tR\aroundId\"`\n" +
	"\x1cGetVotingRoundStatusResponse\x12\x16\n" +
	"\x06exists\x18\x01 \x01(\bR\x06exists\x12(\n" +
	"\x05round\x18\x02 \x01(\v2\x12.proto.VotingRoundR\x05round\"\x1e\n" +
	"\x1cGetActiveVotingRoundsRequest\"K\n" +
	"\x1dGetActiveVotingRoundsResponse\x12*\n" +
	"\x06rounds\x18\x01 \x03(\v2\x12.proto.VotingRoundR\x06rounds\"\x8e\x02\n" +
	"\x04Vote\x12\"\n" +
	"\rvoter_pub_key\x18\x01 \x01(\tR\vvoterPubKey\x12,\n" +
	"\tvote_type\x18\x02 \x01(\x0e2\x0f.proto.VoteTypeR\bvoteType\x12\x16\n" +
	"\x06target\x18\x03 \x01(\tR\x06target\x12\x18\n" +
	"\asupport\x18\x04 \x01(\bR\asupport\x12!\n" +
	"\fstake_weight\x18\x05 \x01(\tR\vstakeWeight\x128\n" +
	"\ttimestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12%\n" +
	"\x0evote_signature\x18\a \x01(\fR\rvoteSignature\"\x82\x04\n" +
	"\vVotingRound\x12\x19\n" +
	"\bround_id\x18\x01 \x01(\tR\aroundId\x12,\n" +
	"\tvote_type\x18\x02 \x01(\x0e2\x0f.proto.VoteTypeR\bvoteType\x12\x16\n" +
	"\x06target\x18\x03 \x01(\tR\x06target\x129\n" +
	"\n" +
	"start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12!\n" +
	"\x05votes\x18\x06 \x03(\v2\v.proto.VoteR\x05votes\x12%\n" +
	"\x0erequired_stake\x18\a \x01(\tR\rrequiredStake\x12+\n" +
	"\x06status\x18\b \x01(\x0e2\x13.proto.VotingStatusR\x06status\x12.\n" +
	"\x13total_support_stake\x18\t \x01(\tR\x11totalSupportStake\x12,\n" +
	"\x12total_oppose_stake\x18\n" +
	" \x01(\tR\x10totalOpposeStake\x12*\n" +
	"\x11total_voted_stake\x18\v \x01(\tR\x0ftotalVotedStake\x12\x1f\n" +
	"\vvoter_count\x18\f \x01(\x05R\n" +
	"voterCount*f\n" +
	"\bVoteType\x12\x13\n" +
	"\x0fVOTE_TYPE_BLOCK\x10\x00\x12\x13\n" +
	"\x0fVOTE_TYPE_EPOCH\x10\x01\x12\x16\n" +
	"\x12VOTE_TYPE_SLASHING\x10\x02\x12\x18\n" +
	"\x14VOTE_TYPE_GOVERNANCE\x10\x03*[\n" +
	"\fVotingStatus\x12\x11\n" +
	"\rVOTING_ACTIVE\x10\x00\x12\x11\n" +
	"\rVOTING_PASSED\x10\x01\x12\x11\n" +
	"\rVOTING_FAILED\x10\x02\x12\x12\n" +
	"\x0eVOTING_EXPIRED\x10\x032\xeb\x02\n" +
	"\x12DynamicVoteService\x12S\n" +
	"\x10StartVotingRound\x12\x1e.proto.StartVotingRoundRequest\x1a\x1f.proto.StartVotingRoundResponse\x12;\n" +
	"\bCastVote\x12\x16.proto.CastVoteRequest\x1a\x17.proto.CastVoteResponse\x12_\n" +
	"\x14GetVotingRoundStatus\x12\".proto.GetVotingRoundStatusRequest\x1a#.proto.GetVotingRoundStatusResponse\x12b\n" +
	"\x15GetActiveVotingRounds\x12#.proto.GetActiveVotingRoundsRequest\x1a$.proto.GetActiveVotingRoundsResponseB\x1eZ\x1cgithub.com/mezonai/mmn/protob\x06proto3"

var (
	file_dynamic_vote_proto_rawDescOnce sync.Once
	file_dynamic_vote_proto_rawDescData []byte
)

func file_dynamic_vote_proto_rawDescGZIP() []byte {
	file_dynamic_vote_proto_rawDescOnce.Do(func() {
		file_dynamic_vote_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dynamic_vote_proto_rawDesc), len(file_dynamic_vote_proto_rawDesc)))
	})
	return file_dynamic_vote_proto_rawDescData
}

var file_dynamic_vote_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dynamic_vote_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dynamic_vote_proto_goTypes = []any{
	(VoteType)(0),                         // 0: proto.VoteType
	(VotingStatus)(0),                     // 1: proto.VotingStatus
	(*StartVotingRoundRequest)(nil),       // 2: proto.StartVotingRoundRequest
	(*StartVotingRoundResponse)(nil),      // 3: proto.StartVotingRoundResponse
	(*CastVoteRequest)(nil),               // 4: proto.CastVoteRequest
	(*CastVoteResponse)(nil),              // 5: proto.CastVoteResponse
	(*GetVotingRoundStatusRequest)(nil),   // 6: proto.GetVotingRoundStatusRequest
	(*GetVotingRoundStatusResponse)(nil),  // 7: proto.GetVotingRoundStatusResponse
	(*GetActiveVotingRoundsRequest)(nil),  // 8: proto.GetActiveVotingRoundsRequest
	(*GetActiveVotingRoundsResponse)(nil), // 9: proto.GetActiveVotingRoundsResponse
	(*Vote)(nil),                          // 10: proto.Vote
	(*VotingRound)(nil),                   // 11: proto.VotingRound
	(*timestamp.Timestamp)(nil),           // 12: google.protobuf.Timestamp
}
var file_dynamic_vote_proto_depIdxs = []int32{
	0,  // 0: proto.StartVotingRoundRequest.vote_type:type_name -> proto.VoteType
	11, // 1: proto.GetVotingRoundStatusResponse.round:type_name -> proto.VotingRound
	11, // 2: proto.GetActiveVotingRoundsResponse.rounds:type_name -> proto.VotingRound
	0,  // 3: proto.Vote.vote_type:type_name -> proto.VoteType
	12, // 4: proto.Vote.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 5: proto.VotingRound.vote_type:type_name -> proto.VoteType
	12, // 6: proto.VotingRound.start_time:type_name -> google.protobuf.Timestamp
	12, // 7: proto.VotingRound.end_time:type_name -> google.protobuf.Timestamp
	10, // 8: proto.VotingRound.votes:type_name -> proto.Vote
	1,  // 9: proto.VotingRound.status:type_name -> proto.VotingStatus
	2,  // 10: proto.DynamicVoteService.StartVotingRound:input_type -> proto.StartVotingRoundRequest
	4,  // 11: proto.DynamicVoteService.CastVote:input_type -> proto.CastVoteRequest
	6,  // 12: proto.DynamicVoteService.GetVotingRoundStatus:input_type -> proto.GetVotingRoundStatusRequest
	8,  // 13: proto.DynamicVoteService.GetActiveVotingRounds:input_type -> proto.GetActiveVotingRoundsRequest
	3,  // 14: proto.DynamicVoteService.StartVotingRound:output_type -> proto.StartVotingRoundResponse
	5,  // 15: proto.DynamicVoteService.CastVote:output_type -> proto.CastVoteResponse
	7,  // 16: proto.DynamicVoteService.GetVotingRoundStatus:output_type -> proto.GetVotingRoundStatusResponse
	9,  // 17: proto.DynamicVoteService.GetActiveVotingRounds:output_type -> proto.GetActiveVotingRoundsResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_dynamic_vote_proto_init() }
func file_dynamic_vote_proto_init() {
	if File_dynamic_vote_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dynamic_vote_proto_rawDesc), len(file_dynamic_vote_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dynamic_vote_proto_goTypes,
		DependencyIndexes: file_dynamic_vote_proto_depIdxs,
		EnumInfos:         file_dynamic_vote_proto_enumTypes,
		MessageInfos:      file_dynamic_vote_proto_msgTypes,
	}.Build()
	File_dynamic_vote_proto = out.File
	file_dynamic_vote_proto_goTypes = nil
	file_dynamic_vote_proto_depIdxs = nil
}
