name: mmn

services:
  bootnode:
    build:
      context: .
      args:
        DB_VENDOR: ${DB_VENDOR:-rocksdb} #rocksdb or leveldb
    image: mmn-node:${DB_VENDOR:-rocksdb}
    container_name: bootnode
    command: ["./mmn", "bootnode", "--bootstrap-p2p-port", "9000", "--privkey-path", "./config/bootnode_privkey.txt"]
    ports:
      - "9000:9000"
    volumes:
      - logs_data:/app/logs
    environment:
      - LOGFILE=mmn-bootnode.log
      - LOGFILE_MAX_SIZE_MB=${LOGFILE_MAX_SIZE_MB:-500}
      - LOGFILE_MAX_AGE_DAYS=${LOGFILE_MAX_AGE_DAYS:-7}
    networks:
      - mezon
    restart: unless-stopped

  node1:
    image: mmn-node:${DB_VENDOR:-rocksdb}
    container_name: node1
    command: >
      sh -c '
        ./mmn init --data-dir "./node-data/node1" --genesis "config/genesis.yml" --database "${DB_VENDOR:-rocksdb}" --privkey-path "config/key1.txt" &&
        ./mmn node --database ${DB_VENDOR:-rocksdb} --data-dir "./node-data/node1" --listen-addr ":8001" --jsonrpc-addr ":8081" --grpc-addr ":9001" --bootstrap-addresses "/dns4/bootnode/tcp/9000/p2p/12D3KooWAhZyyZV2KBtfm8zsLaKPvcmVfaYczJ5UdpB8cJU7vKg2"
      '
    depends_on:
      - bootnode
    ports:
      - "8001:8001"
      - "8081:8081"
      - "9001:9001"
    volumes:
      - node_data:/app/node-data
      - logs_data:/app/logs
    environment:
      - LOGFILE=mmn-node1.log
      - LOGFILE_MAX_SIZE_MB=${LOGFILE_MAX_SIZE_MB:-500}
      - LOGFILE_MAX_AGE_DAYS=${LOGFILE_MAX_AGE_DAYS:-7}
      - CORS_ALLOWED_ORIGINS=*
      - CORS_ALLOWED_METHODS=POST,OPTIONS
      - CORS_ALLOWED_HEADERS=Content-Type
    networks:
      - mezon
    restart: unless-stopped
      
  listener:
    image: mmn-node:${DB_VENDOR:-rocksdb}
    container_name: listener
    command: >
      sh -c '
        ./mmn init --data-dir "./node-data/listener" --genesis "config/genesis.yml" --database "${DB_VENDOR:-rocksdb}" --privkey-path "config/listener.txt" &&
        ./mmn node --database ${DB_VENDOR:-rocksdb} --data-dir "./node-data/listener" --listen-addr ":8004" --jsonrpc-addr ":8084" --grpc-addr ":9004" --mode listen --bootstrap-addresses "/dns4/bootnode/tcp/9000/p2p/12D3KooWAhZyyZV2KBtfm8zsLaKPvcmVfaYczJ5UdpB8cJU7vKg2"
      '
    depends_on:
      - bootnode
      - node1
    ports:
      - "8004:8004"
      - "8084:8084"
      - "9004:9004"
    volumes:
      - node_data:/app/node-data
      - logs_data:/app/logs
    environment:
      - LOGFILE=mmn-listener.log
      - LOGFILE_MAX_SIZE_MB=${LOGFILE_MAX_SIZE_MB:-500}
      - LOGFILE_MAX_AGE_DAYS=${LOGFILE_MAX_AGE_DAYS:-7}
      - CORS_ALLOWED_ORIGINS=*
      - CORS_ALLOWED_METHODS=POST,OPTIONS
      - CORS_ALLOWED_HEADERS=Content-Type
    networks:
      - mezon
    restart: unless-stopped

  loki:
    image: grafana/loki:3.5.0
    container_name: loki
    command: ["-config.file=/etc/loki/config.yml"]
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    networks:
      - mezon
    restart: unless-stopped

  promtail:
    image: grafana/promtail:3.5.0
    container_name: promtail
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - logs_data:/var/log/mmn:ro
    depends_on:
      - loki
    networks:
      - mezon
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.6.5
    container_name: grafana
    environment:
      - GF_PLUGINS_PREINSTALL=grafana-lokiexplore-app
    ports:
      - "3300:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - loki
    networks:
      - mezon
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-config.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/targets:/etc/prometheus/targets:ro
      - prom_data:/prometheus
    networks:
      - mezon
    restart: unless-stopped
    
  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mezon
    restart: unless-stopped

networks:
  mezon:

volumes:
  node_data:
  logs_data:
  loki_data:
  grafana_data:
  prom_data: